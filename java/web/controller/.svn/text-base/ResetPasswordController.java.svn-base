/**
 * ResetPasswordController.java
 * 
 * $Author: cysun $
 * $Date: 2011-09-24 00:13:02 -0700 (Sat, 24 Sep 2011) $
 */
package csns.web.controller;

import java.util.HashMap;
import java.util.Map;

import org.apache.velocity.app.VelocityEngine;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.security.authentication.encoding.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.ui.velocity.VelocityEngineUtils;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import csns.model.core.User;
import csns.model.core.dao.UserDao;
import csns.util.ApplicationProperties;
import csns.web.validator.ResetPasswordValidator;

@Controller
@RequestMapping("/resetPassword.html")
public class ResetPasswordController {

    @Autowired
    private UserDao userDao;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private MailSender mailSender;

    @Autowired
    private VelocityEngine velocityEngine;

    @Autowired
    ResetPasswordValidator validator;

    @Autowired
    ApplicationProperties applicationProperties;

    private Logger logger = LoggerFactory.getLogger( ResetPasswordController.class );

    @RequestMapping(method = RequestMethod.GET)
    public String setupForm( Model model )
    {
        model.addAttribute( "user", new User() );
        return "resetPassword";
    }

    @RequestMapping(method = RequestMethod.POST)
    public String resetPassword( @ModelAttribute User user,
        BindingResult result, ModelMap models )
    {
        validator.validate( user, result );
        if( result.hasErrors() ) return "resetPassword";

        String username = user.getUsername();
        String cin = user.getCin();
        String email = user.getEmail1();

        if( StringUtils.hasText( cin ) )
            user = userDao.getUserByCin( cin );
        else if( StringUtils.hasText( username ) )
            user = userDao.getUserByUsername( username );
        else
            user = userDao.getUserByEmail( email );

        if( user == null )
        {
            models.addAttribute( "errorKey", "error.reset.password.failure" )
                .addAttribute( "errorCauseKey",
                    "error.reset.password.user.not.found" )
                .addAttribute( "backUrl", "/resetPassword.html" );
            return "error";
        }

        if( user.hasRole( "ROLE_NEWUSER" ) )
        {
            models.addAttribute( "errorKey", "error.reset.password.failure" )
                .addAttribute( "errorCauseKey", "error.reset.password.new.user" )
                .addAttribute( "backUrl", "/resetPassword.html" );
            return "error";
        }

        String newPassword = "" + (int) (Math.random() * 1000000);
        user.setPassword( passwordEncoder.encodePassword( newPassword, null ) );
        if( user.isCinEncrypted() && StringUtils.hasText( cin ) )
        {
            user.setCin( cin );
            user.setCinEncrypted( false );
        }
        userDao.saveUser( user );
        logger.info( "Reset password for " + user.getUsername() );

        Map<String, String> vModels = new HashMap<String, String>();
        vModels.put( "username", user.getUsername() );
        vModels.put( "password", newPassword );
        String text = VelocityEngineUtils.mergeTemplateIntoString(
            velocityEngine, "resetPassword.vm", vModels );

        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo( user.getEmail1() );
        message.setFrom( applicationProperties.getProperty( "app.email" ) );
        message.setText( text );
        try
        {
            mailSender.send( message );
            logger.info( "Password reset message sent to " + user.getEmail1() );
        }
        catch( MailException e )
        {
            logger.error( e.getMessage() );
            models.addAttribute( "errorKey", "error.reset.password.failure" )
                .addAttribute( "errorCauseKey",
                    "error.reset.password.email.problem" )
                .addAttribute( "backUrl", "/resetPassword.html" );
            return "error";
        }

        models.addAttribute( "msgTitleKey", "msg.reset.password.title" )
            .addAttribute( "msgKey", "msg.reset.password.body" );
        return "status";
    }

}
